generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?                @db.VarChar(255)
  email                 String?                @unique @db.VarChar(255)
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DishType {
  id     String         @id @default(cuid())
  name   String         @db.VarChar(255)
  dishes DishDishType[]
}

model Dish {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(255)
  price       Int
  description String
  dishTypes   DishDishType[]
}

model DishDishType {
  id         String   @id @default(cuid())
  dishId     String
  dishTypeId String
  dish       Dish     @relation(fields: [dishId], references: [id])
  dishType   DishType @relation(fields: [dishTypeId], references: [id])

  @@unique([dishId, dishTypeId])
}

enum UserRole {
  USER
  ADMIN
}
