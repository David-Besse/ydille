// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?                @db.VarChar(255)
  email                 String?                @unique @db.VarChar(255)
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique @db.VarChar(255)
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model DishType {
  id     String @id @default(cuid())
  name   String @db.VarChar(255)
  dishes Dish[]
}

model Dish {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  price       Int
  description String   @db.Text
  dishTypeId  String   @db.VarChar(255)
  menu        DishType @relation(fields: [dishTypeId], references: [id], onDelete: Cascade)
}
